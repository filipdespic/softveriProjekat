package forme;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import kontroleriKI.OpstiKontrolerKI;
import modeli.ModelTabeleClanovi;
import modeli.ModelTabeleKnjige;
import modeli.ModelTabelePrimerci;

public class EkranskaFormaIznajmljivanje extends OpstaEkranskaForma {

    private ModelTabeleKnjige modelTabeleKnjige = new ModelTabeleKnjige();
    private ModelTabeleClanovi modelTabeleClanovi = new ModelTabeleClanovi();
    private ModelTabelePrimerci modelTabelePrimerci = new ModelTabelePrimerci();

    /**
     * Creates new form EkranskaFormaIznajmljivanje
     */
    public EkranskaFormaIznajmljivanje() {
        initComponents();
        postaviImeForme();
        postaviModeleTabela();
        try {
            OpstiKontrolerKI.vratiInstancu().ucitajClanovePrimerkeIKnjige(this);
        } catch (Exception ex) {
            Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaKnjige = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaPrimerci = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaClanovi = new javax.swing.JTable();
        btnKreirajIznajmljivanje = new javax.swing.JButton();
        btnNazadNaGlavnuFormu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Odaberite knjigu:");

        tabelaKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaKnjige.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaKnjigeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaKnjige);

        jLabel2.setText("Odaberite primerak:");

        tabelaPrimerci.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaPrimerci);

        jLabel3.setText("Odaberite ƒçlana:");

        tabelaClanovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelaClanovi);

        btnKreirajIznajmljivanje.setText("Kreiraj iznajmljivanje");
        btnKreirajIznajmljivanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajIznajmljivanjeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKreirajIznajmljivanje, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnKreirajIznajmljivanje)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnNazadNaGlavnuFormu.setText("Nazad na glavnu formu");
        btnNazadNaGlavnuFormu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNazadNaGlavnuFormuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNazadNaGlavnuFormu))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnNazadNaGlavnuFormu)
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNazadNaGlavnuFormuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNazadNaGlavnuFormuActionPerformed
        nazadNaGlavnuFormu();
    }//GEN-LAST:event_btnNazadNaGlavnuFormuActionPerformed

    private void tabelaKnjigeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaKnjigeMouseClicked
        if (tabelaKnjige.getSelectedRow() != -1) {
            try {
                postaviPrimerke(modelTabeleKnjige.getLista().get(tabelaKnjige.getSelectedRow()).getISBN());
            } catch (Exception ex) {
                Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tabelaKnjigeMouseClicked

    private void btnKreirajIznajmljivanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajIznajmljivanjeActionPerformed
        if (tabelaClanovi.getSelectedRow() != -1 && tabelaPrimerci.getSelectedRow() != -1 && tabelaKnjige.getSelectedRow() != -1) {
            try {
                kreirajIznajmljivanje();
            } catch (Exception ex) {
                Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Odaberite knjigu, zatim primerak i ƒçlana");
        }
    }//GEN-LAST:event_btnKreirajIznajmljivanjeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EkranskaFormaIznajmljivanje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EkranskaFormaIznajmljivanje().setVisible(true);
            }
        });
    }


    @Override
    void postaviImeForme() {
        this.setTitle("Forma za rad sa iznajmljivanjima");
    }

    @Override
    void postaviModeleTabela() {
        tabelaClanovi.setModel(modelTabeleClanovi);
        tabelaKnjige.setModel(modelTabeleKnjige);
        tabelaPrimerci.setModel(modelTabelePrimerci);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKreirajIznajmljivanje;
    private javax.swing.JButton btnNazadNaGlavnuFormu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabelaClanovi;
    private javax.swing.JTable tabelaKnjige;
    private javax.swing.JTable tabelaPrimerci;
    // End of variables declaration//GEN-END:variables

    private void postaviPrimerke(String isbn) throws Exception {
        OpstiKontrolerKI.vratiInstancu().postaviPrimerke(isbn, this);
    }

    private void kreirajIznajmljivanje() throws Exception {
        HashMap<String, String> podaci = new HashMap<>();
        podaci.put("sifraPrimerka", modelTabelePrimerci.getLista().get(tabelaPrimerci.getSelectedRow()).getSifraPrimerka());
        podaci.put("sifraClana", modelTabeleClanovi.getLista().get(tabelaClanovi.getSelectedRow()).getSifraClana());
        podaci.put("sifraPrimerka", modelTabelePrimerci.getLista().get(tabelaPrimerci.getSelectedRow()).getSifraPrimerka());
        podaci.put("sifraAdmina", glavna.getUlogovaniAdministrator().getSifraAdmina());
        boolean uspesno = OpstiKontrolerKI.vratiInstancu().kreirajIznajmljivanje(podaci);
        if (uspesno) {
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio iznajmljivanje");
        } else {
            JOptionPane.showMessageDialog(this, "Sistem ne mo≈æe da zapamti iznajmljivanje");
        }
    }

    //setteri i getteri
    public ModelTabeleKnjige getModelTabeleKnjige() {
        return modelTabeleKnjige;
    }

    public void setModelTabeleKnjige(ModelTabeleKnjige modelTabeleKnjige) {
        this.modelTabeleKnjige = modelTabeleKnjige;
    }

    public ModelTabeleClanovi getModelTabeleClanovi() {
        return modelTabeleClanovi;
    }

    public void setModelTabeleClanovi(ModelTabeleClanovi modelTabeleClanovi) {
        this.modelTabeleClanovi = modelTabeleClanovi;
    }

    public ModelTabelePrimerci getModelTabelePrimerci() {
        return modelTabelePrimerci;
    }

    public void setModelTabelePrimerci(ModelTabelePrimerci modelTabelePrimerci) {
        this.modelTabelePrimerci = modelTabelePrimerci;
    }

    public javax.swing.JTable getTabelaClanovi() {
        return tabelaClanovi;
    }

    public void setTabelaClanovi(javax.swing.JTable tabelaClanovi) {
        this.tabelaClanovi = tabelaClanovi;
    }

    public javax.swing.JTable getTabelaKnjige() {
        return tabelaKnjige;
    }

    public void setTabelaKnjige(javax.swing.JTable tabelaKnjige) {
        this.tabelaKnjige = tabelaKnjige;
    }

    public javax.swing.JTable getTabelaPrimerci() {
        return tabelaPrimerci;
    }

    public void setTabelaPrimerci(javax.swing.JTable tabelaPrimerci) {
        this.tabelaPrimerci = tabelaPrimerci;
    }

    //neimplementirane metode
    @Override
    void popuniTabele() {
        throw new UnsupportedOperationException("Metoda koju ste pozvali nije jo≈° implementirana."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    void postaviToolTipove() {
        throw new UnsupportedOperationException("Metoda koju ste pozvali nije jo≈° implementirana."); //To change body of generated methods, choose Tools | Templates.
    }
    
     @Override
    HashMap<String, String> kreirajObjekat() {
        throw new UnsupportedOperationException("Metoda koju ste pozvali nije jo≈° implementirana."); //To change body of generated methods, choose Tools | Templates.
    }
}
